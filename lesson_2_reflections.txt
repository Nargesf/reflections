1. What happens when you initialize a repository? Why do you need to do it?
	
	Initializing a git repository converts an ordinary folder to a git repository

2. How is the staging area different from the working directory and the repository? What value do you think it offers?
	
	The staging area plays a kinda mediocre role between the working directory and the repository. Before committing  any changes to the repository, we add them to the staging area, and then they will be ready to be commited. The value it makes includes: it makes your commits more organized, i.e. if you don't want all of the edits to your files to be in one commits, so you just add the files you want to the staging area by "git add" command, and then commit them to the repository. 

3. How can you use the staging area to make sure you have one commit per logical change?

	Per logical change to each file, we add it to the staging area and make a commit, and so on

4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	You may have edited a same originated file in different ways, and want to track all the changes for each way. Branches help you implement different modes of the same project. For instance, if you are developing a game you can use branches to create 'easy', 'medium', and 'hard' mode of your game.

5. How do the diagrams help you visualize the branch structure?
	
	The diagram visualize all the commits and their connections to their parents. It works just like a directed graph. All the nodes which are reachable from the root of a branch re included in that branch. The last node (commit) we reach and doesn't have a parent is the first commit we've made. We should always be careful not to forget creating branches.

6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	The merging makes sure no revisions are lost nor any redundant codes are appeared anymore. We represent it in the diagram as one master branch which includes all the commits of all the branches in it. The commits we merge become one commit with two parents.


7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	If you merge manually, it's always painful to look for every single difference you've made and merge the files, and there is always the chance that you miss someone else's changes in the file. Git automatically merges wherever it doesn't find any conflict and if it does it fails to merge, however it show you wherever it found a conflict so basically makes it much easier for you to merge and that's the only time when manually is prefered because git cannot find the best way to edit it itself.




